/* COLORS */
$black: #000;
$blue-dark-1: #16325c;
$blue-dark-2: #30486c;
$blue-dark-3: #1b3d71;
$blue-dark-4: #54698d;
$blue-light-1: #b6dde9;
$blue-light-2: #c6e1ff;
$blue-light-4: #e3f3ff;
$blue-medium-1: #005fb2;
$blue-medium-2: #0062b8;
$blue-medium-3: #1589ee;
$blue-medium-4: #1090ff;
$blue-medium-5: #5897fb;
$blue-medium-6: #5eb4ff;
$gray-medium-17: #b0adab;
$blue-sf: #0070d2;
$gray-dark-1: #080707;
$gray-dark-2: #444444;
$gray-dark-3: #4e5c60;
$gray-dark-4: #5e5d60;
$gray-dark-5: #6a6a6a;
$gray-dark-6: #747474;
$gray-dark-7: #777f8b;
$gray-dark-8: #3e3e3c;
$gray-dark-9: #706e6b;
$gray-light-2: #dddddd;
$gray-light-5: #dddbda;
$gray-light-6: #d8dde6;
$gray-light-7: #ebebeb;
$gray-light-8: #e0e5ee;
$gray-light-10: #e4ebf6;
$gray-light-11: #ecebea;
$gray-light-12: #eef1f6;
$gray-light-14: #f2f3f3;
$gray-light-17: #f8f8f8;
$gray-light-19: #f4f6f9;
$gray-light-20: #fdfdfd;
$gray-light-21: #fafaf9;
$gray-light-26: #fafaf9;
$gray-medium-1: #999999;
$gray-medium-2: #969492;
$gray-medium-4: #9a9ea5;
$gray-medium-6: #aaaaaa;
$gray-medium-7: #a9a9a9;
$gray-medium-8: #b0b0b0;
$gray-medium-11: #c9c7c5;
$gray-medium-12: #a8b7c7;
$green-dark-1: #04844b;
$green-light-3: #4bca81;
$orange-medium-1: #ffb75d;
$orange-cs: #ffa429;
$red-medium-1: #c11a1a;
$red-medium-2: #c23934;
$red-medium-3: #d81c2a;
$red-medium-4: #d9675d;
$green-medium-1: #06aad1;
$white: #fff;

$css4: true;

// It is nessesary to define the variables in sass map instead of :root, for compatibility reasons.
$variables: (
	--main-c: $blue-sf,
	--main-bg: $gray-light-11,
	--main-br: $gray-light-5,
	--main-alt-bg: $white,

	--button-c: $blue-sf,
	--button-bg: $white,
	--button-bg-alt: $blue-sf,
	--button-br: $gray-light-5,
	--button-hover: $gray-light-14,
	--button-hover-alt: $blue-medium-1,
	--button-c-disabled: $gray-light-5,
	--button-checkbox-br: $gray-dark-9,
	--button-icon-c: $gray-dark-9,

	--font-c: $gray-dark-1,
	--font-highlight: $blue-sf,
	--font-inverse-c: $white,

	--main-header-bg: $white,
	--main-header-c: $gray-dark-1,
	--main-header-icon-bg: $blue-sf,
	--main-logo-bg: $green-medium-1,

	--table-header-bg: $gray-light-26,
	--table-bg: $white,
	--table-br: $gray-light-5,
	--table-c: $gray-dark-1,

	--modal-content-br: rgba($black, 0.2),
	--modal-content-box: rgba($black, 0.5),
	--modal-content-bg: $white,

	--progress-meter-bg: $gray-light-6,
	--progress-meter-bar-bg: $blue-medium-6,

	--light-bg: $gray-light-17,

	--form-element-c: $gray-dark-1,
	--form-element-bg: $white,
	--form-element-bg-alt: $gray-medium-2,
	--form-element-br: $gray-light-5,
	--form-element-box: $blue-sf,
	--form-element-disabled-bg: $gray-light-11,
	--form-element-disabled-c: $gray-medium-2,
	--form-element-icon-c: $gray-medium-17,
	--form-element-icon-alt-c: $gray-dark-9,
	--form-label-c: $gray-dark-8,
	--form-required-c: $red-medium-3,
	--form-checkbox-c: $blue-sf,
	--form-tooltip-warning-bg: $red-medium-2,
	--form-element-btn-close-c: $gray-medium-1,
	--form-element-hover-bg: $blue-light-4,

	--shadow-light: rgba($black, 0.11),
	--shadow-medium: rgba($black, 0.22),
	--shadow-dark: rgba($black, 0.5),
);

// This will be used later for dark theme support
// $darkVariables: (
// 	--main-c: #ff0000,
// 	--main-bg: darkblue,
// 	--main-br: $white,

// 	--button-c: $blue-sf,
// 	--button-bg: $white,
// 	--button-br: $gray-light-6
// );

// Every variable that uses main color needs to be set in .sc-app as well
#root {
	--button-c: #{var(--main-c)};
	--button-bg: #{var(--main-alt-bg)};
	--button-br: #{var(--main-br)};
}

// Here we transfer the variables from the map to the :root element
@if($css4) {
	:root {
		@each $variable, $value in $variables {
			#{$variable}: $value;
		}
	}

	// This will be used later for dark theme support
	// .dark {
	// 	@each $variable, $value in $darkVariables {
	// 		#{$variable}: $value;
	// 	}
	// }
}

/*** HELPER FUNCTIONS ***/

// change value type to string
@function to-string($value) {
	@return inspect($value);
}
// MIX WITH BLACK ~ helper function for darken mixins
@function mixb($variable, $opacity) {
	@return unquote('linear-gradient(to top,rgba(0, 0, 0,'+ $opacity +'),rgba(0, 0, 0,' + $opacity + '))' + $variable);
}
// MIX WITH WHITE ~ helper function for lighten mixins
@function mixw($variable, $opacity) {
	@return unquote('linear-gradient(to top,rgba(255, 255, 255,'+ $opacity +'),rgba(255, 255, 255,' + $opacity + ')) ' + $variable);
}

/*** BACKGROUND COLOR MIXINS ***/

/* SET BACKGROUND COLOR */
// $variable: only CSS variable format - if $color isn't set, it will take default color from variables map
// $color [optional]: any color format [ex. var(--color), $blue-sf, #000, black] - used to change already set background to different color
// ex. @include sbg(--button-bg);
// ex. @include sbg(--button-bg, var(--main-c));
@mixin sbg($variable, $color: $variable) {
	@if($color == $variable) {
		background: map-get($variables, $variable);
	} @else if (str-slice(to-string($color), 1, 4) == 'var(') {
		#{$variable}: #{$color};
		$length: str-length($color) - 1;
		$helper: str-slice($color, 5, $length);
		background: map-get($variables, $helper);
	} @else {
		#{$variable}: #{$color};
		background: $color;
	}

	@supports(--css: variables) {
		background: unquote('var(' + $variable + ')');
	}
}

/* BACKGROUND DARKEN */
// $variable: CSS variable or SCSS variable [ex. var(--color), $blue-sf] - background color to be darkened
// $opacity: opacity percantange of black background [value should be between 0 and 1; higher number means darker background]
// $ie [optional]: any color format [ex. var(--color), $blue-sf, #000, black] - used to set fallback for IE11 when needed - background color to be darkened
// ex. @include bgd(var(--button-bg), 0.4);
// ex. @include bgd(var(--button-bg), 0.4, var(--main-c));
@mixin bgd($variable, $opacity, $ie: $variable) {
	@if (str-slice(to-string($ie), 1, 4) == 'var(') {
		$length: str-length($ie) - 1;
		$helper: str-slice($ie, 5, $length);
		background: mixb(map-get($variables, $helper), $opacity);
	} @else {
		background: mixb($ie, $opacity);
	}

	@supports(--css: variables) {
		background: mixb($variable, $opacity);
	}
}

/* BACKGROUND LIGHTEN */
// $variable: CSS variable or SCSS variable [ex. var(--color), $blue-sf] - background color to be lightened
// $opacity: opacity percantange of white background [value should be between 0 and 1; higher number means lighter background]
// $ie [optional]: any color format [ex. var(--color), $blue-sf, #000, black] - used to set fallback for IE11 when needed - background color to be lightened
// ex. @include bgl(var(--button-bg), 0.4);
// ex. @include bgl(var(--button-bg), 0.4, $blue-sf);
@mixin bgl($variable, $opacity, $ie: $variable) {
	@if (str-slice(to-string($ie), 1, 4) == 'var(') {
		$length: str-length($ie) - 1;
		$helper: str-slice($ie, 5, $length);
		background: mixw(map-get($variables, $helper), $opacity);
	} @else {
		background: mixw($ie, $opacity);
	}

	@supports(--css: variables) {
		background: mixw($variable, $opacity);
	}
}

/*** TEXT COLOR MIXINS ***/

/* SET TEXT COLOR */
// $variable: only CSS variable format - if $color isn't set, it will take default color from variables map
// $color [optional]: any color format (ex. var(--color), $blue-sf, #000, black) - used to change already set text color to different color
// ex. @include sc(--button-c);
// ex. @include sc(--button-c, var(--main-c));
@mixin sc($variable, $color: $variable) {
	@if($color == $variable) {
		color: map-get($variables, $variable);
	} @else if (str-slice(to-string($color), 1, 4) == 'var(') {
		#{$variable}: #{$color};
		$length: str-length($color) - 1;
		$helper: str-slice($color, 5, $length);
		color: map-get($variables, $helper);
	} @else {
		#{$variable}: #{$color};
		color: $color;
	}

	@supports(--css: variables) {
		color: unquote('var(' + $variable + ')');
	}
}

/* COLOR DARKEN */
// $variable: CSS variable or SCSS variable [ex. var(--color), $blue-sf] - color to be darkened
// $opacity: opacity percantange of black background [value should be between 0 and 1; higher number means darker background]
// $ie [optional]: any color format [ex. var(--color), $blue-sf, #000, black] - used to set fallback for IE11 when needed - color to be darkened
// ex. @include cd(var(--button-bg), 0.4);
// ex. @include cd(var(--button-bg), 0.4, $blue-sf);
@mixin cd($variable, $opacity, $ie: $variable) {
	@if (str-slice(to-string($ie), 1, 4) == 'var(') {
		$length: str-length($ie) - 1;
		$helper: str-slice($ie, 5, $length);
		color: mix(black, map-get($variables, $helper), $opacity * 100);
	} @else {
		color: mix(black, $ie, $opacity * 100);
	}

	@supports(--css: variables) {
		background: mixb($variable, $opacity);
		color: transparent;
		background-clip: text;
		-webkit-background-clip: text;
		-moz-background-clip: text;
	}
}

/* COLOR LIGHTEN */
// $variable: CSS variable or SCSS variable [ex. var(--color), $blue-sf] - color to be lightened
// $opacity: opacity percantange of white background [value should be between 0 and 1; higher number means lighter background]
// $ie [optional]: any color format [ex. var(--color), $blue-sf, #000, black] - used to set fallback for IE11 when needed - color to be lightened
// ex. @include cl(var(--button-bg), 0.4);
// ex. @include cl(var(--button-bg), 0.4, $blue-sf);
@mixin cl($variable, $opacity, $ie: $variable) {
	@if (str-slice(to-string($ie), 1, 4) == 'var(') {
		$length: str-length($ie) - 1;
		$helper: str-slice($ie, 5, $length);
		color: mix(white, map-get($variables, $helper), $opacity * 100);
	} @else {
		color: mix(white, $ie, $opacity * 100);
	}

	@supports(--css: variables) {
		background: mixw($variable, $opacity);
		color: transparent;
		background-clip: text;
		-webkit-background-clip: text;
		-moz-background-clip: text;
	}
}

/*** OTHER ***/

/* HELPER MIXIN FOR IE FALLBACK */
// Mixin temporally sets the $css4 variable to false, compiles the IE fallback, then makes the variable true again and compiles the css4 code
// It should contain properties that use css4 variables (other than background and text color), otherwise there will be unnessesary duplication of properties.
@mixin css4 {
	$css4: false !global;
	@content;
	$css4: true !global;
	@supports(--css: variables) {
		@content;
	}
}

/* CUSTOM VAR FUNCTION - borders, box-shadow, gradients... */
// $variable: only CSS variable format - this color will be returned from function
// $ie [optional]: any color format [ex. var(--color), $blue-sf, #000, black] - used to set fallback for IE11 when needed - color to be returned from function for IE only
// to change border variable to new color it is necessary to define it within @css4 mixin [see example]
// ex.
// @include css4 {
//	--border-c: #{var(--main-c)};
//	border: 1px solid cvar(--border-c, var(--main-c));
// }
@function cvar($variable, $ie: $variable) {
	@if($css4==false) {
		@if (str-slice(to-string($ie), 1, 4) == 'var(') {
			$length: str-length($ie) - 1;
			$helper: str-slice($ie, 5, $length);
			@return map-get($variables, $helper);
		} @else if (str-slice(to-string($ie), 1, 2) == '--')  {
			@return map-get($variables, $ie);
		} @else {
			@return $ie;
		}
	} @else {
		@return unquote('var(' + $variable + ')');
	}
}

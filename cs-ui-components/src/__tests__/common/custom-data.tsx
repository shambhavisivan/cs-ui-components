import * as React from 'react';
import {
	CSButtonIconPosition,
	CSButtonSize,
	CSButtonStyle,
	CSButtonType,
	CSButtonWidth,
} from '../../components/CSButton';
import { CSIconOrigin } from '../../components/CSIcon';
import { CSTooltipPosition, CSTooltipStylePosition, CSTooltipVariant } from '../../components/CSTooltip';

export const tooltip = {
	content: 'content',
	delayTooltip: 500,
	focusable: false,
	height: '100px',
	maxHeight: '200px',
	maxWidth: '400px',
	padding: '1rem',
	position: 'top-left' as CSTooltipPosition,
	stickyOnClick: true,
	stylePosition: 'absolute' as CSTooltipStylePosition,
	tooltipHeader: 'info',
	variant: 'basic' as CSTooltipVariant,
	width: '300px',
};

export const icons = [{
	name: 'cart',
	color: '#ffffff',
	frame: true,
	origin: 'slds' as CSIconOrigin,
	rotate: 180,
	size: '3rem',
	title: 'title 1',
}, {
	name: 'table',
	color: '#000000',
	frame: false,
	origin: 'cs' as CSIconOrigin,
	rotate: 0,
	size: '2rem',
	title: 'title 2',
	tooltip,
}];

export const actions = [{
	label: 'label 1',
	borderRadius: '1rem',
	btnStyle: 'brand' as CSButtonStyle,
	btnType: 'transparent' as CSButtonType,
	color: '#ffffff',
	disabled: true,
	iconName: 'delete',
	iconColor: '#000000',
	iconOrigin: 'slds' as CSIconOrigin,
	iconSize: '2rem',
	iconPosition: 'right' as CSButtonIconPosition,
	iconRotate: 180,
	labelHidden: true,
	link: 'link 1',
	loading: true,
	onClick: () => {},
	onKeyDown: () => {},
	onMouseDown: () => {},
	onMouseEnter: () => {},
	onMouseLeave: () => {},
	openInNewTab: true,
	routerLink: <></>,
	size: 'xsmall' as CSButtonSize,
	title: 'title 1',
	value: 'value 1',
	width: 'max' as CSButtonWidth,
}, {
	label: 'label 2',
	borderRadius: '0',
	btnStyle: 'outline' as CSButtonStyle,
	btnType: 'default' as CSButtonType,
	color: '#000000',
	disabled: false,
	iconName: 'action',
	iconColor: '#ffffff',
	iconOrigin: 'cs' as CSIconOrigin,
	iconSize: '1rem',
	iconPosition: 'left' as CSButtonIconPosition,
	iconRotate: 0,
	labelHidden: false,
	link: 'link 2',
	loading: false,
	onClick: () => {},
	onKeyDown: () => {},
	onMouseDown: () => {},
	onMouseEnter: () => {},
	onMouseLeave: () => {},
	openInNewTab: false,
	routerLink: <></>,
	size: 'large' as CSButtonSize,
	title: 'title 2',
	value: 'value 2',
	width: 'auto' as CSButtonWidth,
	tooltip,
}];

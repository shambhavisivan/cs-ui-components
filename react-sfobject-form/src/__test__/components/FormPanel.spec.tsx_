import React from 'react';

import { shallow } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
import Enzyme from 'enzyme'
import { AppContext } from '../../types/AppContext';
import { LabelApi } from '../../api/LabelApi';
import { SFApi } from '../../api/SFApi';
import { UserInfoApi } from '../../api/UserInfoApi';
import { FormPanelDescriptor } from '../../types/FormDescriptor';
import { SFObject } from '../../types/SFObject';
import { AccordionItemButton, AccordionItemPanel } from 'react-accessible-accordion';
import { FormPanel } from '../../components/FormPanel';
import { FormField } from '../../components/fields/FormField';
import { Plugins } from '../../Plugins';

Enzyme.configure({ adapter: new Adapter() })

it("renders accordion", () => {
	const ctx: AppContext = {
		label: {
			validationMessageRequired: "required"
		} as LabelApi,
		userInfo: {} as UserInfoApi,
		sf: {} as SFApi,
		plugins: {} as Plugins
	};
	const descriptor: FormPanelDescriptor = {
		title: "Title",
		isOpenByDefault: true,
		fields: [
			{
				name: "name",
				fieldType: "STRING",
				label: "Name"
			}
		]
	};
	const basket: Basket = {
		fields: {
			name: "test name"
		}
	};
	const uut = shallow(<FormPanel ctx={ctx} onChange={() => { }} descriptor={descriptor} basket={basket} errors={{}} />);
	expect(uut.find(AccordionItemButton)).toHaveLength(1);
	expect(uut.find(AccordionItemPanel)).toHaveLength(1);
});

it("calculates field status", () => {
	const ctx: AppContext = {
		label: {
			validationMessageRequired: "required"
		} as LabelApi,
		userInfo: {} as UserInfoApi,
		sf: {} as SFApi,
		plugins: {} as Plugins
	};
	const descriptor: FormPanelDescriptor = {
		title: "Title",
		isOpenByDefault: true,
		fields: [
			{
				name: "name",
				fieldType: "STRING",
				label: "Name",
				visible: "true"
			}
		]
	};
	const basket: SFObject = {
		fields: {
			name: "test name"
		}
	};
	const uut = shallow(<FormPanel ctx={ctx} onChange={() => { }} descriptor={descriptor} basket={basket} errors={{}} />);
	expect(uut.find(FormField).prop("status")).toBe("visible");
});

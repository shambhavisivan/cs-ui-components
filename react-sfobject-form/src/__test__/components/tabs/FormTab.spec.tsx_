import React from 'react';

import { shallow } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
import Enzyme from 'enzyme'
import { AppContext } from '../../../types/AppContext';
import { LabelApi } from '../../../api/LabelApi';
import { UserInfoApi } from '../../../api/UserInfoApi';
import { SFApi } from '../../../api/SFApi';
import { FormDescriptor } from '../../../types/FormDescriptor';
import { SFObject } from '../../../types/SFObject';
import { FormTab } from '../../../components/tabs/FormTab';
import { Accordion } from 'react-accessible-accordion';
import { SaveButton } from '../../../components/SaveButton';
import { FormPanel } from '../../../components/FormPanel';
import { Plugins } from '../../../Plugins';

Enzyme.configure({ adapter: new Adapter() })

it("renders form tab", () => {
	const ctx: AppContext = createBasicContext();
	const descriptor: FormDescriptor = createDescriptor();
	const basket: SFObject = createBasicBasket();

	const uut = shallow(<FormTab ctx={ctx} descriptor={descriptor} basket={basket} update={() => { }} />);

	expect(uut.find(Accordion)).toHaveLength(1);
	expect(uut.find(SaveButton)).toHaveLength(1);
});

it("saves basket when save is called", (done) => {
	const ctx: AppContext = createBasicContext();
	const descriptor: FormDescriptor = createDescriptor();
	const basket: SFObject = createBasicBasket();

	const uut = shallow(<FormTab ctx={ctx} descriptor={descriptor} basket={basket} update={() => { }} />);

	expect.assertions(1);
	(uut.instance() as FormTab).save()
		.then(() => {
			expect(ctx.sf.saveBasket).toBeCalledTimes(1);
		})
		.then(done);
});

it("doesn't save when validation error is present", (done) => {
	const ctx: AppContext = createBasicContext();
	const descriptor: FormDescriptor = createDescriptorWithValidation();
	const basket: SFObject = createBasicBasket();

	const uut = shallow(<FormTab ctx={ctx} descriptor={descriptor} basket={basket} update={() => { }} />);

	expect.assertions(2);

	expect(uut.find(FormPanel).prop("errors")).toStrictEqual({
		name: "Name must contain a number"
	});

	(uut.instance() as FormTab).save()
		.then(() => {
			expect(ctx.sf.saveBasket).not.toBeCalled();
		})
		.then(done);
});

it("passes change up to update() prop", () => {
	const ctx: AppContext = createBasicContext();
	const descriptor: FormDescriptor = createDescriptor();
	const basket: SFObject = createBasicBasket();
	const update = jest.fn();

	const uut = shallow(<FormTab ctx={ctx} descriptor={descriptor} basket={basket} update={update} />);

	(uut.find(FormPanel).prop("onChange") as Function)("name", "new name");
	expect(update).toBeCalledTimes(1);
	expect(update).toBeCalledWith({
		fields: {
			"name": "new name"
		}
	})
});

it("fires before/after save events when save() is called", (done) => {
	const ctx: AppContext = createBasicContext();
	const descriptor: FormDescriptor = createDescriptor();
	const basket: SFObject = createBasicBasket();

	const uut = shallow(<FormTab ctx={ctx} descriptor={descriptor} basket={basket} update={() => { }} />);

	expect.assertions(3);
	(uut.instance() as FormTab).save()
		.then(() => {
			expect(ctx.plugins.fire).toBeCalledTimes(2);
			expect(ctx.plugins.fire).nthCalledWith(1, "beforesave", ctx, basket);
			expect(ctx.plugins.fire).nthCalledWith(2, "aftersave", ctx, basket);
		})
		.then(done);
});

it("doesn't call aftersave if save() fails", (done) => {
	const ctx: AppContext = createBasicContext();
	const descriptor: FormDescriptor = createDescriptorWithValidation();
	const basket: SFObject = createBasicBasket();

	const uut = shallow(<FormTab ctx={ctx} descriptor={descriptor} basket={basket} update={() => { }} />);

	expect.assertions(1);
	(uut.instance() as FormTab).save()
		.then(() => {
			expect(ctx.sf.saveBasket).not.toBeCalled();
		})
		.then(done);
});

it("doesn't call saveBasket() if beforesave fails", (done) => {
	const ctx: AppContext = createBasicContext();
	const descriptor: FormDescriptor = createDescriptor();
	const basket: SFObject = createBasicBasket();
	ctx.plugins.fire = jest.fn(() => Promise.reject("test error"));

	const uut = shallow(<FormTab ctx={ctx} descriptor={descriptor} basket={basket} update={() => { }} />);

	expect.assertions(2); // make sure test fails if catch() block isn't hit
	(uut.instance() as FormTab).save()
		.catch((e) => {
			expect(ctx.sf.saveBasket).not.toBeCalled();
			expect(e).toBe("test error");
		})
		.then(done);
});


// HELPER FUNCTIONS

function createBasicContext() {
	return {
		label: {
			validationMessageRequired: "required"
		} as LabelApi,
		userInfo: {} as UserInfoApi,
		sf: {
			saveBasket: jest.fn((x) => Promise.resolve(x))
		} as unknown as SFApi,
		plugins: {
			fire: jest.fn()
		} as unknown as Plugins
	};
}

function createBasicBasket() {
	return {
		fields: {
			name: "test name"
		}
	};
}

function createDescriptor(): FormDescriptor {
	return {
		type: "FORM",
		panels: [
			{
				title: "Title",
				isOpenByDefault: true,
				fields: [
					{
						name: "name",
						fieldType: "STRING",
						label: "Name"
					}
				]
			}
		]
	};
};

function createDescriptorWithValidation(): FormDescriptor {
	return {
		type: "FORM",
		panels: [
			{
				title: "Title",
				isOpenByDefault: true,
				fields: [
					{
						name: "name",
						fieldType: "STRING",
						label: "Name",
						validation: [
							{
								regex: "[0-9]",
								errorMessage: "${name} must contain a number"
							}
						]
					}
				]
			}
		]
	};
}